/****************************************************************************/
/***                                                                      ***/
/***   source file generated by ASC 1.63 - altona shader compiler.        ***/
/***                                                                      ***/
/****************************************************************************/

#include "shaders.hpp"

/****************************************************************************/

#line 28 "shaders.asc"
void sSimpleMaterialPara::Set(const sViewport &view)
#line 29 "shaders.asc"
{
      mvp = view.ModelScreen;
      mv = view.ModelView;
      m = view.Model;

      const sMatrix44 &proj = view.PMatrix();
      proj0.x = proj.i.x; proj0.y = proj.j.y; proj0.z = proj.k.z; proj0.w = proj.l.x;
      proj1.x = proj.l.z; proj1.y = proj.l.y; proj1.z = proj.k.x; proj1.w = proj.k.y;
    }
#line 24 "shaders.cpp"
#line 57 "shaders.asc"
void sSimpleMaterialEnvPara::Set(const sViewport &view,const sMaterialEnv &env)
#line 58 "shaders.asc"
{
      sMatrix34 m;
      sVector30 l[4];

      mvp = view.ModelScreen;
      mv = view.ModelView;
      m = view.Model;

      const sMatrix44 &proj = view.PMatrix();
      proj0.x = proj.i.x; proj0.y = proj.j.y; proj0.z = proj.k.z; proj0.w = proj.l.x;
      proj1.x = proj.l.z; proj1.y = proj.l.y; proj1.z = proj.k.x; proj1.w = proj.k.y;

      m = view.Model;
      m.Trans3();

      l[0] = env.LightDir[0]*m;
      l[1] = env.LightDir[1]*m;
      l[2] = env.LightDir[2]*m;
      l[3] = env.LightDir[3]*m;

      ld[0].Init(-l[0].x,-l[1].x,-l[2].x,-l[3].x);
      ld[1].Init(-l[0].y,-l[1].y,-l[2].y,-l[3].y);
      ld[2].Init(-l[0].z,-l[1].z,-l[2].z,-l[3].z);
      la   .InitColor(env.AmbientColor);
      lc[0].InitColor(env.LightColor[0]);
      lc[1].InitColor(env.LightColor[1]);
      lc[2].InitColor(env.LightColor[2]);
      lc[3].InitColor(env.LightColor[3]);
    }
#line 57 "shaders.cpp"

/****************************************************************************/


/****************************************************************************/

sShader *sSimpleMaterial::VS(sInt i)
{
#if 0
  static const sU8 *codes[] =
  {
    (const sU8 *)data_0000,
    (const sU8 *)data_0001,
    (const sU8 *)data_0002,
    (const sU8 *)data_0003,
    0,
    0,
    (const sU8 *)data_0006,
    (const sU8 *)data_0007,
    (const sU8 *)data_0008,
    (const sU8 *)data_0009,
    (const sU8 *)data_000a,
    (const sU8 *)data_000b,
    0,
    0,
    (const sU8 *)data_000e,
    (const sU8 *)data_000f,
  };
  static sDInt sizes[] =
  {
    sizeof(data_0000),
    sizeof(data_0001),
    sizeof(data_0002),
    sizeof(data_0003),
    0,
    0,
    sizeof(data_0006),
    sizeof(data_0007),
    sizeof(data_0008),
    sizeof(data_0009),
    sizeof(data_000a),
    sizeof(data_000b),
    0,
    0,
    sizeof(data_000e),
    sizeof(data_000f),
  };
  sVERIFY(codes[i])
#endif

#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL45,(const sU8 *)codes[i],sizes[i]);
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL23,(const sU8 *)codes[i],sizes[i]);
#else
  return sCreateShaderRaw(sSTF_VERTEX,0,0);
#endif
}

sShader *sSimpleMaterial::PS(sInt i)
{
#if 0
  static const sU8 *codes[] =
  {
    (const sU8 *)data_0000,
    (const sU8 *)data_0001,
    0,
    (const sU8 *)data_0003,
    0,
    (const sU8 *)data_0005,
    0,
    0,
  };
  static sDInt sizes[] =
  {
    sizeof(data_0000),
    sizeof(data_0001),
    0,
    sizeof(data_0003),
    0,
    sizeof(data_0005),
    0,
    0,
  };
  sVERIFY(codes[i])
#endif

#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL45,(const sU8 *)codes[i],sizes[i]);
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL23,(const sU8 *)codes[i],sizes[i]);
#else
  return sCreateShaderRaw(sSTF_PIXEL,0,0);
#endif
}

sSimpleMaterial::sSimpleMaterial()
{
#line 116 "shaders.asc"

    AddTex1 = 0;
  
#line 160 "shaders.cpp"
}
void sSimpleMaterial::SelectShaders(sVertexFormatHandle *format)
{
#line 121 "shaders.asc"

    sInt n;
    
    // pick vertex shader

    n = 0;
    if(format->GetAvailMask() & (1<<sVF_COLOR0)) 
      n |= sSimpleMaterialVSPermMask_Color;
    if(format->GetAvailMask() & (1<<sVF_UV0))    
      n |= sSimpleMaterialVSPermMask_UV0;
    if(format->GetAvailMask() & (1<<sVF_UV1))    
      n |= sSimpleMaterialVSPermMask_UV1;
    if((format->GetAvailMask() & (1<<sVF_NORMAL)) && (Flags & sMTRL_LIGHTING) ) 
      n |= sSimpleMaterialVSPermMask_Light;
    VertexShader = VS(n);

    // pick pixel shader (number of textures)

    n = 0;
    if(Texture[0] || (TFlags[0]&sMTF_EXTERN))
      n |= sSimpleMaterialPSPerm_T0Mul;
    if(Texture[1] || (TFlags[1]&sMTF_EXTERN))
    {
      if(AddTex1)
        n |= sSimpleMaterialPSPerm_T1Add;
      else
        n |= sSimpleMaterialPSPerm_T1Mul;
    }
    PixelShader = PS(n); 
  
#line 195 "shaders.cpp"
}

sShader *sCubeMaterial::VS()
{
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_VERTEX,0,0);
#endif
}

sShader *sCubeMaterial::PS()
{
#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL45,(const sU8 *)data,sizeof(data));
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL23,(const sU8 *)data,sizeof(data));
#else
  return sCreateShaderRaw(sSTF_PIXEL,0,0);
#endif
}

void sCubeMaterial::SelectShaders(sVertexFormatHandle *format)
{
  VertexShader = sCubeMaterial::VS();
  PixelShader = sCubeMaterial::PS();
}

sShader *sYUVMaterial::VS(sInt i)
{
#if 0
  static const sU8 *codes[] =
  {
    (const sU8 *)data_0000,
    (const sU8 *)data_0001,
  };
  static sDInt sizes[] =
  {
    sizeof(data_0000),
    sizeof(data_0001),
  };
  sVERIFY(codes[i])
#endif

#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL45,(const sU8 *)codes[i],sizes[i]);
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_VERTEX|sSTF_HLSL23,(const sU8 *)codes[i],sizes[i]);
#else
  return sCreateShaderRaw(sSTF_VERTEX,0,0);
#endif
}

sShader *sYUVMaterial::PS(sInt i)
{
#if 0
  static const sU8 *codes[] =
  {
    (const sU8 *)data_0000,
    (const sU8 *)data_0001,
  };
  static sDInt sizes[] =
  {
    sizeof(data_0000),
    sizeof(data_0001),
  };
  sVERIFY(codes[i])
#endif

#if sRENDERER==sRENDER_DX11
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL45,(const sU8 *)codes[i],sizes[i]);
#elif sRENDERER==sRENDER_DX9
  return sCreateShaderRaw(sSTF_PIXEL|sSTF_HLSL23,(const sU8 *)codes[i],sizes[i]);
#else
  return sCreateShaderRaw(sSTF_PIXEL,0,0);
#endif
}

void sYUVMaterial::SelectShaders(sVertexFormatHandle *format)
{
#line 278 "shaders.asc"
      
    sInt n=0;
    if(format->GetAvailMask() & (1<<sVF_COLOR0)) 
      n |= sYUVMaterialVSPermMask_Color;
    VertexShader = VS(n);
           
    n=0;
    if (Texture[3])
      n |= sYUVMaterialPSPermMask_AlphaTex;    
    PixelShader = PS(n); 
  
#line 290 "shaders.cpp"
}


/****************************************************************************/


/****************************************************************************/

